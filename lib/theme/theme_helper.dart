import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors('primary'),
    'light': PrimaryColors('light'),
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme,
    'light': ColorSchemes.lightColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors('primary');
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primaryContainer,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              20,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            30,
          ),
          fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  ColorScheme _getColorScheme() {
    return _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
  }
  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();

  /// Returns the current theme data.
  ColorScheme getColorScheme() => _getColorScheme();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // onPrimary: Color(0XFF0E0E0E),
     onPrimary: Color(0Xae0e28),

    shadow: Color(0XFF0E0E0E),
    onPrimaryContainer: Color(0X9E74264D),
    onTertiary: Color(0X9E74264D),
    scrim: Color(0X16FFFFFF),
    primaryContainer: Color(0X16FFFFFF),
    tertiaryContainer: Color(0XFF8640CD),
    secondaryContainer: Color(0XFF8640CD),
    error: Color(0XFF0E0E0E),
    onErrorContainer: Color(0X16FFFFFF),
    outline: Color(0XFF0E0E0E),
    onSurfaceVariant: Color(0XFF0E0E0E),
    onBackground: Color(0X9E74264D),
    outlineVariant: Color(0X16FFFFFF),
    errorContainer: Color(0XFF7C2B51),
    onSurface: Color(0X9E74264D),
    onError: Color(0X23616161),
    surface: Color(0X16FFFFFF),
    onInverseSurface: Color(0X23616161),
    onSecondaryContainer: Color(0XFF0E0E0E),
    tertiary: Color(0X16FFFFFF),
    surfaceTint: Color(0XFF0E0E0E),
    onTertiaryContainer: Color(0XFF0E0E0E),
    surfaceVariant: Colors.white,
    inversePrimary: Color(0X16FFFFFF),
    secondary: Color(0X16FFFFFF),
    inverseSurface: Color(0XFF0E0E0E),
    background: Color(0X16FFFFFF),
    onSecondary: Color(0X9E74264D),
    primary: Color(0Xae0e28),  //color
  );

  static final lightColorScheme = ColorScheme.light(
    onPrimary: Colors.white,
    shadow: Colors.blue,
    onPrimaryContainer: Colors.yellow,
    onTertiary: Colors.green,
    scrim: Colors.yellow,
    primaryContainer: Colors.black.withOpacity(0.1),
    tertiaryContainer: Colors.orange,
    secondaryContainer: Colors.brown,
    error: Colors.lime,
    onErrorContainer: Colors.amber,
    outline: Colors.cyan,
    onSurfaceVariant: Colors.indigo,
    onBackground: Colors.deepPurple,
    outlineVariant: Colors.teal,
    errorContainer: Colors.lightGreen,
    onSurface: Colors.deepOrange,
    onError: Colors.deepPurpleAccent,
    surface: Colors.lightBlue,
    onInverseSurface: Colors.blueGrey,
    onSecondaryContainer: Colors.greenAccent,
    tertiary: Colors.transparent,
    surfaceTint: Colors.orangeAccent,
    onTertiaryContainer: Colors.deepOrangeAccent,
    surfaceVariant: Colors.transparent,
    inversePrimary: Colors.brown,
    secondary: Colors.grey,
    inverseSurface: Colors.blueAccent,
    background: Colors.tealAccent,
    onSecondary: Colors.lightBlueAccent,
    primary: Colors.redAccent,
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  final String theme;

  PrimaryColors(this.theme);

  Color get primaryVariant =>
      (theme == 'light') ? Color(0X16FFFFFF) : Color(0X16FFFFFF);

  Color get secondaryVariant =>
      (theme == 'light') ? Color(0XFF8640CD) : Color(0XFF8640CD);

  Color get indigo50 =>
      (theme == 'light') ? Color(0XFFE3DEEF) : Color(0XFFE3DEEF);

  Color get blueA200 =>
      (theme == 'light') ? Color(0XFF1A15FF) : Color(0XFF618DFF);

  Color get deepPurple100 =>
      (theme == 'light') ? Color(0XFFD9CCFE) : Color(0XFFD9CCFE);

  Color get blue600 =>
      (theme == 'light') ? Color(0XFF278CE8) : Color(0XFF278CE8);

  Color get gray100 =>
      (theme == 'light') ? Color(0XFFF7F7F7) : Color(0XFFF7F7F7);

  Color get gray3007f =>
      (theme == 'light') ? Color(0X7FDCDDDF) : Color(0X7FDCDDDF);

  Color get gray400 =>
      (theme == 'light') ? Color(0XFFBDBDBD) : Color(0XFFBDBDBD);

  Color get purple900 =>
      (theme == 'light') ? Color(0XFF1A15FF) : Color(0XFF570374);

  Color get deepPurple50 =>
      (theme == 'light') ? Color(0XFFE9E5F4) : Color(0XFFE9E5F4);

  Color get blueGray400 =>
      (theme == 'light') ? Color(0XFF8C8C8C) : Color(0XFF8C8C8C);

  Color get deepRed400 =>
      (theme == 'light') ? Color(0Xae0e28) : Color(0Xae0e28);             //color code


  Color get blueGray700 =>
      (theme == 'light') ? Color(0XFFE3DAFF) : Color(0XFF453671);

  Color get gray200 =>
      (theme == 'light') ? Color(0XFF8C8C8C) : Color(0XFFE9E9E9);

  Color get deepPurple5001 =>
      (theme == 'light') ? Color(0XFFE7E2F7) : Color(0XFFE7E2F7);

  Color get blueGray40001 =>
      (theme == 'light') ? Color(0XFF888888) : Color(0XFF888888);

  Color get black900 =>
      (theme == 'light') ? Color(0XFF000000) : Color(0XFF000000);

  Color get gray300 =>
      (theme == 'light') ? Color(0XFFDADADA) : Color(0XFFDADADA);

  Color get indigoA700 =>
      (theme == 'light') ? Color(0XFF1915FF) : Color(0XFF1915FF);

  Color get deepPurple5002 =>
      (theme == 'light') ? Color(0XFFE3DAFF) : Color(0XFFE3DAFF);

  Color get playBg =>
      (theme == 'light') ? Colors.black : Colors.white.withOpacity(0.09);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
